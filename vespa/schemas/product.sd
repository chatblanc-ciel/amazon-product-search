schema product {
    document product {
        field product_id type string {
            indexing: attribute | summary
        }
        field product_title type string {
            indexing: index | summary
            index: enable-bm25
        }
        field product_bullet_point type string {
            indexing: index | summary
            index: enable-bm25
        }
        field product_description type string {
            indexing: index | summary
            index: enable-bm25
        }
        field product_brand type string {
            indexing: attribute | index | summary
            index: enable-bm25
        }
        field product_color type string {
            indexing: attribute | index | summary
            index: enable-bm25
        }
        field product_locale type string {
            indexing: attribute | index | summary
        }
        field product_vector type tensor<float>(x[768]) {
            indexing: attribute | index
            attribute {
                distance-metric: angular
            }
            index {
                hnsw {
                    max-links-per-node: 16
                    neighbors-to-explore-at-insert: 500
                }
            }
        }
    }

    fieldset default {
        fields: product_title, product_brand, product_description, product_brand, product_color
    }

    onnx-model model {
        file: models/model_quantized.onnx
        input input_ids: input_ids
        input attention_mask: attention_mask
        output vector: vector
    }

    rank-profile random {
        first-phase {
            expression {
                random
            }
        }
    }

    rank-profile ranking_base {
        inputs {
            query(query_vector) tensor<float>(x[768])
        }

        function lexical_score() {
            expression: bm25(product_title) + bm25(product_description)
        }

        function semantic_score() {
            expression: closeness(field, product_vector)
        }
    }

    rank-profile lexical inherits ranking_base {
        first-phase {
            expression: lexical_score
        }
        summary-features {
            lexical_score
        }
    }

    rank-profile semantic inherits ranking_base {
        first-phase {
            expression: semantic_score
        }
        summary-features {
            semantic_score
        }
    }

    rank-profile hybrid inherits ranking_base {
        global-phase {
            expression: query(alpha) * reciprocal_rank(lexical_score) + (1 - query(alpha)) * reciprocal_rank(semantic_score)
        }
        summary-features {
            lexical_score
            semantic_score
        }
    }
}

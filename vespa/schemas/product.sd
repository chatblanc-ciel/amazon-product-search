schema product {
    document product {
        field product_id type string {
            indexing: attribute | summary
        }
        field product_title type string {
            indexing: index | summary
            index: enable-bm25
        }
        field product_bullet_point type string {
            indexing: index | summary
            index: enable-bm25
        }
        field product_description type string {
            indexing: index | summary
            index: enable-bm25
        }
        field product_brand type string {
            indexing: attribute | index | summary
            index: enable-bm25
        }
        field product_color type string {
            indexing: attribute | index | summary
            index: enable-bm25
        }
        field product_locale type string {
            indexing: attribute | index | summary
        }
        field product_vector type tensor<float>(x[768]) {
            indexing: attribute | index
            attribute {
                distance-metric: euclidean
            }
            index {
                hnsw {
                    max-links-per-node: 16
                    neighbors-to-explore-at-insert: 500
                }
            }
        }
    }
    fieldset default {
        fields: product_title, product_brand, product_description, product_brand, product_color
    }
    onnx-model sbert {
        file: models/sbert.onnx
        input input_ids: input_ids
        input token_type_ids: token_type_ids
        input attention_mask: attention_mask
        output output_0: output_0
        output output_1: output_1
    }
    rank-profile random inherits default {
        first-phase {
            expression {
                random
            }
        }
    }
    rank-profile bm25 inherits default {
        first-phase {
            expression {
                bm25(product_title) + bm25(product_description)
            }
        }
    }
    rank-profile native_rank inherits default {
        first-phase {
            expression {
                nativeRank(product_title, product_description)
            }
        }
    }
    rank-profile semantic-similarity inherits default {
        inputs {
            query(query_vector) tensor<float>(x[768])         }
        first-phase {
            expression {
                closeness(product_vector)
            }
        }
    }
}
